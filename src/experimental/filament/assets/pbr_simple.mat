// Copyright 2025 DeepMind Technologies Limited
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

material {
    name : pbr_simple,
    shadingModel : lit,
    culling: none,
    flipUV: false,
    parameters : [
        { type : sampler2d, name : BaseColor },
        { type : sampler2d, name : Normal },
        { type : float4, name : BaseColorFactor },
        { type : float, name : MetallicFactor },
        { type : float, name : RoughnessFactor }
    ],
    requires : [
        uv0
    ]
}

fragment {
  void material(inout MaterialInputs material) {
    vec2 uv = getUV0();
    
    // simplified material
    //vec4 baseColor = materialParams.BaseColorFactor;
    //baseColor *= texture(materialParams_BaseColor, uv);

    // testing without color factor, as things look kind of gray
    vec4 baseColor = texture(materialParams_BaseColor, uv);


    material.baseColor = baseColor;
    
    // get normal from texture
    material.normal = texture(materialParams_Normal, uv).xyz * 2.0 - 1.0;
    
    prepareMaterial(material);
    
    // set PBR properties directly from factors
    material.roughness = materialParams.RoughnessFactor;
    material.metallic  = materialParams.MetallicFactor;
  }
}


